#version=RHEL7
# System authorization information
auth --enableshadow --passalgo=sha512

# we're pretending to be a CDROM, even if we're...kinda not
cdrom

# Use text mode
text
# Dont' run the Setup Agent on first boot
firstboot --disable
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# partitioning is done via %pre madness
%include /tmp/part-include

# configure root password
rootpw --iscrypted $6$ddmoPYtWupIPA/Vn$9EcJ170zv2lnVP6mLK0W9zAWaf7OYmu3yHk9dY0/pl5dPluvkTp/wTLmT4C7BAIE4FAGxPQ0K0zPwftvdvl5/0

# networking is also in %pre (well, unless it's in %post)
%include /tmp/net-include

# reboot when done
%include /tmp/reboot-flag

# System timezone
timezone America/Los_Angeles --isUtc

# System services
services --enabled="lldpad,chronyd"

%packages
@core
@base

grub2
grub2-efi
grub2-efi-modules
shim
efibootmgr

%include /tmp/package-include

systemd-networkd

lldpad
epel-release
nut

dstat
htop
tmux
xorg-x11-xauth

policycoreutils-python

dhcp
memtest86+
ipxe-bootimgs
tftp-server

# needed for org_fedora_oscap addon
openscap
openscap-scanner
scap-security-guide

%end

%addon org_fedora_oscap
    content-type = scap-security-guide
    profile = common
%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%pre
# be a chatterbox here
set -x

# on with nullglub
shopt -s nullglob

# functions
partition_all_drives() {
  # partition drives
  for d in /dev/[sv]d*[^0-9] /dev/xvd*[^0-9] ; do
    if [ "${d}" == "${repodisk}" ] ; then continue ; fi
    parted "${d}" mklabel gpt
    parted "${d}" mkpart biosboot 1m 5m
    parted "${d}" toggle 1 bios_grub
    parted "${d}" toggle 1 legacy_boot
    biosboot_dev="${biosboot_dev} ${d}1"

    parted "${d}" mkpart '"EFI System Partition"' 5m 300m
    parted "${d}" toggle 2 boot
    efi_sp_dev="${efi_sp_dev} ${d}2"

    parted "${d}" mkpart boot 300m 800m
    boot_dev="${boot_dev} ${d}3"

    parted "${d}" mkpart primart 800m 100%
    sys_dev="${sys_dev} ${d}4"
  done

}

# parts that can be _reset_ by system config but have a default
reboot_flag="poweroff"
inst_fqdn="netmgmt"

# first get if we have a syscfg on cmdline
read cmdline < /proc/cmdline
for ent in $cmdline ; do
  case $ent in
    syscfg=*)
      syscfg=${ent#syscfg=}
      ;;
  esac
done

# get whatever diskdev we're running on
repodisk=$(awk '$2 == "/run/install/repo" { print $1 }' < /proc/mounts)
repodisk=${repodisk%[1-9]*}

# always stop lvm
vgchange -an

# always stop md devices
for md in /dev/md[0-9]* ; do
  mdadm -S "${md}"
done

# always erase disks, write a new gpt
for d in /dev/[sv]d*[^0-9] /dev/xvd*[^0-9] ; do
  # skip where we booted
  if [ "${d}" == "${repodisk}" ] ; then continue ; fi

  # partitions...
  for part in ${d}[0-9]* ; do
    wipefs -a "${part}"
  done

  # label
  wipefs -a "${d}"
done

# this holds any needed conditional package statements
touch /tmp/package-include

# disk setup globals
biosboot_dev=''
efi_sp_dev=''
boot_dev=''
sys_dev=''

  partition_all_drives

  {
    for part in ${biosboot_dev} ; do
      p=$(basename "${part}")
      printf 'part biosboot --fstype=biosboot --onpart=%s\n' "${p}"
    done
    for part in ${efi_sp_dev} ; do
      p=$(basename "${part}")
      printf 'part /boot/efi --fstype="efi" --onpart=%s\n' "${p}"
    done
    for part in ${boot_dev} ; do
      p=$(basename "${part}")
      printf 'part /boot --fstype="ext2" --onpart=%s\n' "${p}"
    done
    for part in ${sys_dev} ; do
      p=$(basename "${part}")
      printf 'part pv.0 --fstype="lvmpv" --onpart=%s\n' "${p}"
    done
    # LVM
    printf 'volgroup centos_system pv.0\n'
    printf 'logvol / --vgname=centos_system --fstype=ext4 --name=root --size=8192\n'
    printf 'logvol swap --vgname=centos_system --name=swap --size=512\n'

    printf 'bootloader --append=" net.ifnames=0 biosdevname=0 crashkernel auto" --location=mbr\n'
  } > /tmp/part-include

# hang the hostname up
printf 'network --hostname="%s"\n' "${inst_fqdn}" >> /tmp/net-include

# we always create reboot-flag
printf '%s\n' "${reboot_flag}" > /tmp/reboot-flag

# we always create post-vars.
touch /tmp/post-vars

# write out the syscfg for %post
if [ ! -z "${syscfg}" ] ; then
  printf 'syscfg="%s"\n' "${syscfg}" >> /tmp/post-vars
fi

%end

%post --nochroot --log=/mnt/sysimage/root/post.log
# be a chatterbox here
set -x

# on with nullglub
shopt -s nullglob

# pick up env vars from %pre
. /tmp/post-vars

# install grub cross-bootably
if [ -d /sys/firmware/efi/efivars ] ; then
  # install i386 grub in efi
  chroot /mnt/sysimage grub2-install --target=i386-pc /dev/${disk}
  chroot /mnt/sysimage grub2-mkconfig | sed 's@linuxefi@linux16@g' | sed 's@initrdefi@initrd16@g' > /mnt/sysimage/boot/grub2/grub.cfg
else
  # install efi grub in i386
  chroot /mnt/sysimage grub2-mkconfig | sed 's@linux16@linuxefi@g' | sed 's@initrd16@initrdefi@g' > /mnt/sysimage/boot/efi/EFI/centos/grub.cfg
fi

# rewire the repo files :)
{
  for r in os updates extras ; do
    printf '[%s]\nbaseurl=%s/$releasever/%s/$basearch/\ngpgcheck=1\n' "${r}" "http://wcs.bbxn.us/centos" "${r}"
  done
} > /mnt/sysimage/etc/yum.repos.d/CentOS-Base.repo

printf '[%s]\nbaseurl=%s/$releasever/$basearch/\ngpgcheck=1\n' "epel" "http://wcs.bbxn.us/epel" > /mnt/sysimage/etc/yum.repos.d/epel.repo

for f in /mnt/sysimage/etc/pki/rpm-gpg/* ; do
  k=${f##*/}
  chroot /mnt/sysimage rpm --import "/etc/pki/rpm-gpg/${k}"
done

# configure the network using systemd-networkd here.
mkdir -p /mnt/sysimage/etc/systemd/network/

printf '[Match]\nName=eth0\n[Network]\nDHCP=no\nLinkLocalAddressing=no\nLLMNR=no\nMulticastDNS=no\nAddress=192.168.129.11/24\n' > /mnt/sysimage/etc/systemd/network/eth0.network

# shoot NetworkManager in the face
ln -s /dev/null /mnt/sysimage/etc/systemd/system/NetworkManager.service
ln -s /dev/null /mnt/sysimage/etc/systemd/system/NetworkManager-wait-online.service
rm -f /mnt/sysimage/etc/systemd/system/dbus-org.freedesktop.NetworkManager.service.
rm -f /mnt/sysimage/etc/systemd/system/multi-user.target.wants/NetworkManager.service.
rm -f /mnt/sysimage/etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service.
ln -s /usr/lib/systemd/system/systemd-networkd-wait-online.service /etc/systemd/system/network-online.target.wants/systemd-networkd-wait-online.service
rm -f /etc/udev/rules.d/70-persistent-net.rules

# disable ipv6 for most things
printf 'net.ipv6.conf.default.disable_ipv6 = 1\nnet.ipv6.conf.lo.disable_ipv6 = 0\n' > /mnt/sysimage/etc/sysctl.d/40-ipv6.conf

  # configure last-ditch DNS here too.
  printf 'nameserver 8.8.8.8\n' > /mnt/sysimage/etc/resolv.conf

%end
